package hb403.geoexplore.controllers;

import hb403.geoexplore.datatype.MarkerTag;
import hb403.geoexplore.datatype.marker.*;
import hb403.geoexplore.datatype.marker.repository.AlertRepository;
import hb403.geoexplore.datatype.marker.repository.MarkerTagRepository;
import hb403.geoexplore.datatype.request.*;
import hb403.geoexplore.util.GeometryUtil;

import java.util.*;

import io.swagger.v3.oas.annotations.Operation;

import org.locationtech.jts.geom.Polygon;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;


@RestController
public class AlertController {
	
	@Autowired
	protected AlertRepository alert_repo;
	@Autowired
	protected MarkerTagRepository tags_repo;


	@Operation(summary = "Get an alert in the database from its id")
	@GetMapping(path = "geomap/alerts/{id}")
	public @ResponseBody AlertMarker getAlertById(@PathVariable Long id) {
		if(id != null) {
			try {
				final AlertMarker a = this.alert_repo.findById(id).get();
				a.enforceLocationTable();
				return a;
			} catch(Exception e) {

			}
		}
		return null;
	}
	@Operation(summary = "Get all alerts in the database")
	@GetMapping(path = "geomap/alerts")
	public @ResponseBody List<AlertMarker> getAllAlerts() {
		final List<AlertMarker> alerts = this.alert_repo.findAll();
		for(AlertMarker a : alerts) {
			a.enforceLocationTable();
		}
		return alerts;
	}

	@Operation(summary = "Update an alert already in the database by its id")
	@PutMapping(path = "geomap/alerts/{id}")
	public @ResponseBody AlertMarker updateAlertById(@PathVariable Long id, @RequestBody AlertMarker alert) {
		if(id != null && alert != null) {
			alert.setId(id);
			alert.applyUpdatedTimestamp();
			final AlertMarker a = this.alert_repo.save(alert);
			a.enforceLocationTable();
			return a;
		}
		return null;
	}

	@Operation(summary = "Delete an alert from the database by its id")
	@DeleteMapping(path = "geomap/alerts/{id}")
	public @ResponseBody AlertMarker deleteAlertById(@PathVariable Long id) {
		if(id != null) {
			try {
				final AlertMarker a = this.alert_repo.findById(id).get();
				this.alert_repo.deleteById(id);
				a.enforceLocationTable();
				return a;
			} catch(Exception e) {

			}
		}
		return null;
	}



	/** Returns the list of events within the bounds generated by the provided WKT geometry string */
	@Operation(summary = "Get the set of the alerts whose locations are bounded by the provided WKT geometry string")
	@GetMapping(path = "geomap/alerts/within/poly")
	public @ResponseBody Set<AlertMarker> getAlertsWithinPoly(@RequestBody String wkt_bounds_geom) {	// takes in 'well known text' for the bounding geometry --> may define special json formats for predefined bounds later
		try {
			final Set<AlertMarker> bounded = this.alert_repo.findSetWithin( GeometryUtil.getGeometry(wkt_bounds_geom) );
			// System.out.println("Recieved " + bounded.size() + " bounded events");
			for(AlertMarker e : bounded) {
				e.enforceLocationTable();
			}
			return bounded;
		} catch(Exception e) {
			System.out.println("AlertController.getAlertsWithinPoly(): Encountered exception! -- " + e.getMessage());
			// continue >>> (return null)
		}
		return null;
	}

	/**  */
	@Operation(summary = "Get the set of alerts whose locations are bounded by the provided location window")
	@PostMapping(path = "geomap/alerts/within/rect")	// it has to be a POST mapping so we can recieve JSON request objects :(
	public @ResponseBody Set<AlertMarker> getAlertsWithinRect(@RequestBody Range range) {
		if(range == null || range.isInvalid()) return null;
		try {

			final Polygon rect = range.getRect();
			final Set<AlertMarker> bounded = this.alert_repo.findSetWithin( rect );

			System.out.printf(
				"[ALERTS RECT SEARCH]: Recieved bounds object: {\n\tmin lat: %f,\n\tmin lon: %f,\n\tmax lat: %f,\n\tmax lat: %f\n}\n" +
				"[ALERTS RECT SEARCH]: Recieved %d query results.\n" +
				"[ALERTS RECT SEARCH]: Computed search bounds:\n{\n\tWKT: %s\n}\n",
				range.min_latitude,
				range.min_longitude,
				range.max_latitude,
				range.max_longitude,
				bounded.size(),
				rect.toString()
			);

			for(AlertMarker e : bounded) {
				e.enforceLocationTable();
			}
			return bounded;

		} catch(Exception e) {
			System.out.println("AlertController.getAlertsWithinRect(): Encountered exception! -- " + e.getMessage());
			// continue >>> (return null)
		}
		return null;
	}

	@Operation(summary = "Get the set of alerts whose locations are bounded by the provided location window, sorted by distance from the provided location")
	@PostMapping(path = "geomap/alerts/within/rect/sorted")
	public @ResponseBody List<AlertMarker> getProxSortedAlertsWithinRect(@RequestBody LocationRange range) {
		if(range == null || range.isInvalid()) return null;
		try {

			final Polygon rect = range.getRect();
			final List<AlertMarker> bounded = this.alert_repo.findListWithin( rect );

			System.out.printf(
				"[ALERTS RECT SORTED SEARCH]: Recieved bounds object: {\n\tmin lat: %f,\n\tmin lon: %f,\n\tmax lat: %f,\n\tmax lat: %f,\n\tsrc lat: %f,\n\tsrc lat: %f\n}\n" +
				"[ALERTS RECT SORTED SEARCH]: Recieved %d query results.\n" +
				"[ALERTS RECT SORTED SEARCH]: Computed search bounds:\n{\n\tWKT: %s\n}\n",
				range.min_latitude,
				range.min_longitude,
				range.max_latitude,
				range.max_longitude,
				range.src_latitude,
				range.src_longitude,
				bounded.size(),
				rect.toString()
			);

			MarkerBase.sortByProximityAsc(bounded, range.src_latitude, range.src_longitude, true);
			return bounded;

		} catch(Exception e) {
			System.out.println("AlertController.getProxSortedAlertsWithinRect(): Encountered exception! -- " + e.getMessage());
			// continue >>> (return null)
		}
		return null;
	}

	@Operation(summary = "Get all the alerts within the specified proximity (from the specified source) -- results are sorted according to ascending proximity")
	@PostMapping(path = "geomap/alerts/within/proximity")
	public @ResponseBody List<AlertMarker> getAlertsWithinProximitySorted(@RequestBody LocationProximity range) {
		if(range == null || range.isInvalid()) return null;
		try {

			System.out.printf(
				"[ALERTS PROXIMITY SEARCH]: Recieved range object: {\n\tlat: %f,\n\tlon: %f,\n\trange: %f\n}\n",
				range.latitude,
				range.longitude,
				range.range
			);

			final Polygon[] search_bounds = range.getMinMaxSearchBounds();

			System.out.printf(
				"[ALERTS PROXIMITY SEARCH]: Computed search bounds (x%d):\n",
				search_bounds.length
			);
			for(Polygon p : search_bounds) {
				System.out.printf(
					"{\n\tWKT: %s\n}\n",
					p.toString()
				);
			}

			List<AlertMarker> bounded = null;
			for(Polygon p : search_bounds) {
				if(bounded == null) bounded = this.alert_repo.findListWithin(p);
				else bounded.addAll( this.alert_repo.findListWithin(p) );
			}

			System.out.printf(
				"[ALERTS PROXIMITY SEARCH]: Conducted database bounds search - recieved %d results\n",
				bounded.size()
			);

			if(bounded == null) return null;	// make java shut up about not being initialized blah blah blah
			MarkerBase.sortByProximityAsc(bounded, range.latitude, range.longitude, true);
			
			int
				lower = 0,
				upper = bounded.size();
			for(int i = (upper + lower) / 2; lower < upper && i >= 0 && i < bounded.size(); i = (upper + lower) / 2) {	// binary search
				double dist = bounded.get(i).distanceTo(range.latitude, range.longitude);
				if(dist <= range.range) {
					lower = i + 1;
				} else {
					upper = i;
				}
			}
			return bounded.subList(0, lower);

		} catch(Exception e) {

		}
		return null;
	}

	/** */
	@Operation(summary = "Get the distance to an alert from a specified location (IN MILES)")
	@PostMapping(path = "geomap/alerts/{id}/distance")
	public @ResponseBody Double getDistanceToMarkerById(@PathVariable Long id, @RequestBody Location src) {
		if(id != null && src != null && src.isValid()) {
			final AlertMarker m = this.getAlertById(id);
			if(m != null) {
				m.enforceLocationTable();
				return GeometryUtil.arcdistanceGlobal(src.latitude, src.longitude, m.getIo_latitude(), m.getIo_longitude());
			}
		}
		return null;
	}



	@Operation(summary = "Add a prexisting tag by its id to a marker by its id")
	@PostMapping(path = "geomap/alerts/{id}/tags")
	public @ResponseBody AlertMarker addTagToMarkerById(@PathVariable Long id, @RequestBody Long tag_id) {
		if(id != null && tag_id != null) {
			try {
				final MarkerTag t = this.tags_repo.findById(tag_id).get();
				final AlertMarker m = this.alert_repo.findById(id).get();
				if(m.getTags().add(t)) {
					this.alert_repo.save(m);
					return m;
				}
			} catch(Exception e) {

			}
		}
		return null;
	}



	/** TODO:
     * - get marker creator (User) by marker id
     * - get marker tags (MarkerTag[]) by marker id
     * - append [NEW] marker tag to list, accessed by marker id
     * - append [EXISTING] marker tag to list, accessed by marker id and tag id
     * - append User to marker "listed users" by marker id and user id
     */


}
