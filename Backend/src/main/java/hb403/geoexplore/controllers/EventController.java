package hb403.geoexplore.controllers;

import hb403.geoexplore.UserStorage.entity.User;
import hb403.geoexplore.UserStorage.repository.UserRepository;
import hb403.geoexplore.comments.CommentRepo.CommentRepository;
import hb403.geoexplore.comments.Entity.CommentEntity;
import hb403.geoexplore.datatype.MarkerTag;
import hb403.geoexplore.datatype.marker.AlertMarker;
import hb403.geoexplore.datatype.marker.EventMarker;
import hb403.geoexplore.datatype.marker.MarkerBase;
import hb403.geoexplore.datatype.marker.repository.EventRepository;
import hb403.geoexplore.datatype.marker.repository.MarkerTagRepository;
import hb403.geoexplore.datatype.request.Location;
import hb403.geoexplore.datatype.request.LocationProximity;
import hb403.geoexplore.datatype.request.LocationRange;
import hb403.geoexplore.datatype.request.Range;
import hb403.geoexplore.util.GeometryUtil;

import java.util.*;

import io.swagger.v3.oas.annotations.Operation;

import org.locationtech.jts.geom.Polygon;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;


@RestController
public class EventController {
	
	@Autowired
	protected EventRepository events_repo;
	@Autowired
	protected MarkerTagRepository tags_repo;
	@Autowired
	protected UserRepository users_repo;
	@Autowired
	protected CommentRepository commentRepository;


	/** [C]rudl - Add a new event to the database */
	@Operation(summary = "Add a new event to the database")
	@PostMapping(path = "geomap/events")
	public @ResponseBody EventMarker saveEvent(@RequestBody EventMarker event) {
		if(event != null) {
			event.nullifyId();
			event.enforceLocationIO();
			event.applyNewTimestamp();
			final EventMarker e = this.events_repo.save(event);
			e.enforceLocationTable();
			return e;
		}
		return null;
	}
	/** c[R]udl - Get an event from the database from its id */
	@Operation(summary = "Get an event from the database from its id")
	@GetMapping(path = "geomap/events/{id}")
	public @ResponseBody EventMarker getEventById(@PathVariable Long id) {
		if(id != null) {
			try {
				final EventMarker e = this.events_repo.findById(id).get();
				e.enforceLocationTable();
				return e;
			} catch(Exception e) {
				// continue >>> (return null)
			}
		}
		return null;
	}
	/** cr[U]dl - Update an event already in the database by its id */
	@Operation(summary = "Update an event already in the database by its id")
	@PutMapping(path = "geomap/events/{id}")
	public @ResponseBody EventMarker updateEventById(@PathVariable Long id, @RequestBody EventMarker event) {
		if(id != null && event != null) {
			event.setId(id);
			event.enforceLocationIO();
			event.applyUpdatedTimestamp();
			final EventMarker e = this.events_repo.save(event);
			e.enforceLocationTable();
			return e;
		}
		return null;
	}
	/** cru[D]l - Delete an event in the database by its id */
	@Operation(summary = "Delete an event in the database by its id")
	@DeleteMapping(path = "geomap/events/{id}")
	public @ResponseBody EventMarker deleteEventById(@PathVariable Long id) {
		if(id != null) {
			try {
				final EventMarker ref = this.getEventById(id);
				this.events_repo.deleteById(id);
				ref.enforceLocationTable();
				return ref;
			} catch(Exception e) {
				// continue >>> (return null)
			}
		}
		return null;
	}

	/** crud[L] - Get a list of all the events in the database */
	@Operation(summary = "Get a list of all the events in the database")
	@GetMapping(path = "geomap/events")
	public @ResponseBody List<EventMarker> getAllEvents() {
		final List<EventMarker> events = this.events_repo.findAll();
		for(EventMarker e : events) {
			e.enforceLocationTable();
		}
		return events;
	}



	/** Returns the list of events within the bounds generated by the provided WKT geometry string */
	@Operation(summary = "Get the set of the events whose locations are bounded by the provided WKT geometry string")
	@GetMapping(path = "geomap/events/within/poly")
	public @ResponseBody Set<EventMarker> getEventsWithinPoly(@RequestBody String wkt_bounds_geom) {	// takes in 'well known text' for the bounding geometry --> may define special json formats for predefined bounds later
		try {
			final Set<EventMarker> bounded = this.events_repo.findSetWithin( GeometryUtil.getGeometry(wkt_bounds_geom) );
			// System.out.println("Recieved " + bounded.size() + " bounded events");
			for(EventMarker e : bounded) {
				e.enforceLocationTable();
			}
			return bounded;
		} catch(Exception e) {
			System.out.println("EventController.getEventsWithinPoly(): Encountered exception! -- " + e.getMessage());
			// continue >>> (return null)
		}
		return null;
	}

	/**  */
	@Operation(summary = "Get the set of the events whose locations are bounded by the provided location window")
	@PostMapping(path = "geomap/events/within/rect")
	public @ResponseBody Set<EventMarker> getEventsWithinRect(@RequestBody Range range) {	// takes in 'well known text' for the bounding geometry --> may define special json formats for predefined bounds later
		if(range == null || range.isInvalid()) return null;
		try {

			final Polygon rect = range.getRect();
			final Set<EventMarker> bounded = this.events_repo.findSetWithin( rect );

			System.out.printf(
				"[EVENTS RECT SEARCH]: Recieved bounds object: {\n\tmin lat: %f,\n\tmin lon: %f,\n\tmax lat: %f,\n\tmax lat: %f\n}\n" +
				"[EVENTS RECT SEARCH]: Recieved %d query results.\n" +
				"[EVENTS RECT SEARCH]: Computed search bounds:\n{\n\tWKT: %s\n}\n",
				range.min_latitude,
				range.min_longitude,
				range.max_latitude,
				range.max_longitude,
				bounded.size(),
				rect.toString()
			);

			// System.out.println("Recieved " + bounded.size() + " bounded events");
			for(EventMarker e : bounded) {
				e.enforceLocationTable();
			}
			return bounded;
		} catch(Exception e) {
			System.out.println("EventController.getEventsWithinRect(): Encountered exception! -- " + e.getMessage());
			// continue >>> (return null)
		}
		return null;
	}

	@Operation(summary = "Get the set of events whose locations are bounded by the provided location window, sorted by distance from the provided location")
	@PostMapping(path = "geomap/events/within/rect/sorted")
	public @ResponseBody List<EventMarker> getProxSortedEventsWithinRect(@RequestBody LocationRange range) {
		if(range == null || range.isInvalid()) return null;
		try {

			final Polygon rect = range.getRect();
			final List<EventMarker> bounded = this.events_repo.findListWithin( rect );

			System.out.printf(
				"[EVENTS RECT SORTED SEARCH]: Recieved bounds object: {\n\tmin lat: %f,\n\tmin lon: %f,\n\tmax lat: %f,\n\tmax lat: %f,\n\tsrc lat: %f,\n\tsrc lat: %f\n}\n" +
				"[EVENTS RECT SORTED SEARCH]: Recieved %d query results.\n" +
				"[EVENTS RECT SORTED SEARCH]: Computed search bounds:\n{\n\tWKT: %s\n}\n",
				range.min_latitude,
				range.min_longitude,
				range.max_latitude,
				range.max_longitude,
				range.src_latitude,
				range.src_longitude,
				bounded.size(),
				rect.toString()
			);

			MarkerBase.sortByProximityAsc(bounded, range.src_latitude, range.src_longitude, true);
			return bounded;

		} catch(Exception e) {
			System.out.println("EventController.getProxSortedEventsWithinRect(): Encountered exception! -- " + e.getMessage());
			// continue >>> (return null)
		}
		return null;
	}

	@Operation(summary = "Get all the events within the specified proximity (from the specified source) -- results are sorted according to ascending proximity")
	@PostMapping(path = "geomap/events/within/proximity")
	public @ResponseBody List<EventMarker> getEventsWithinProximitySorted(@RequestBody LocationProximity range) {
		if(range == null || range.isInvalid()) return null;
		try {

			System.out.printf(
				"[EVENTS PROXIMITY SEARCH]: Recieved range object: {\n\tlat: %f,\n\tlon: %f,\n\trange: %f\n}\n",
				range.latitude,
				range.longitude,
				range.range
			);

			final Polygon[] search_bounds = range.getMinMaxSearchBounds();

			System.out.printf(
				"[EVENTS PROXIMITY SEARCH]: Computed search bounds (x%d):\n",
				search_bounds.length
			);
			for(Polygon p : search_bounds) {
				System.out.printf(
					"{\n\tWKT: %s\n}\n",
					p.toString()
				);
			}

			List<EventMarker> bounded = null;
			for(Polygon p : search_bounds) {
				if(bounded == null) bounded = this.events_repo.findListWithin(p);
				else bounded.addAll( this.events_repo.findListWithin(p) );
			}

			System.out.printf(
				"[EVENTS PROXIMITY SEARCH]: Conducted database bounds search - recieved %d results\n",
				bounded.size()
			);

			if(bounded == null) return null;	// make java shut up about not being initialized blah blah blah
			MarkerBase.sortByProximityAsc(bounded, range.latitude, range.longitude, true);
			
			int
				lower = 0,
				upper = bounded.size();
			for(int i = (upper + lower) / 2; lower < upper && i >= 0 && i < bounded.size(); i = (upper + lower) / 2) {	// binary search
				double dist = bounded.get(i).distanceTo(range.latitude, range.longitude);
				if(dist <= range.range) {
					lower = i + 1;
				} else {
					upper = i;
				}
			}
			return bounded.subList(0, lower);

		} catch(Exception e) {

		}
		return null;
	}

	/** */
	@Operation(summary = "Get the distance to an event from a specified location (IN MILES)")
	@PostMapping(path = "geomap/events/{id}/distance")
	public @ResponseBody Double getDistanceToMarkerById(@PathVariable Long id, @RequestBody Location src) {
		if(id != null && src != null && src.isValid()) {
			final EventMarker m = this.getEventById(id);
			if(m != null) {
				m.enforceLocationTable();
				return GeometryUtil.arcdistanceGlobal(src.latitude, src.longitude, m.getIo_latitude(), m.getIo_longitude());
			}
		}
		return null;
	}



	@Operation(summary = "Add a prexisting tag by its id to a marker by its id")
	@PostMapping(path = "geomap/events/{id}/tags")
	public @ResponseBody EventMarker addTagToMarkerById(@PathVariable Long id, @RequestBody Long tag_id) {
		if(id != null && tag_id != null) {
			try {
				final MarkerTag t = this.tags_repo.findById(tag_id).get();
				final EventMarker m = this.events_repo.findById(id).get();
				if(m.getTags().add(t)) {
					m.applyUpdatedTimestamp();
					this.events_repo.save(m);
					return m;
				}
			} catch(Exception e) {

			}
		}
		return null;
	}

	@Operation(summary = "Add a prexisting user by id as an attendee to a marker by its id")
	@PostMapping(path = "geomap/events/{id}/attendees")
	public @ResponseBody EventMarker addUserToAttendeesById(@PathVariable Long id, @RequestBody Long user_id) {
		if(id != null && user_id != null) {
			try {
				final EventMarker m = this.events_repo.findById(id).get();
				final User u = this.users_repo.findById(user_id).get();
				if(m.getAttendees().add(u)) {
					m.applyUpdatedTimestamp();
					this.events_repo.save(m);
					return m;
				}
			} catch(Exception e) {

			}
		}
		return null;
	}



	/** TODO:
     * - get marker creator (User) by marker id
     * - get marker tags (MarkerTag[]) by marker id
     * - append [NEW] marker tag to list, accessed by marker id
     * - append [EXISTING] marker tag to list, accessed by marker id and tag id
     * - append User to marker "listed users" by marker id and user id
     */


}
