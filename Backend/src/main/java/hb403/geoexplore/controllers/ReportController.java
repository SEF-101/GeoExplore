package hb403.geoexplore.controllers;

import hb403.geoexplore.UserStorage.entity.User;
import hb403.geoexplore.UserStorage.repository.UserRepository;
import hb403.geoexplore.comments.CommentRepo.CommentRepository;
import hb403.geoexplore.comments.Entity.CommentEntity;
import hb403.geoexplore.datatype.MarkerTag;
import hb403.geoexplore.datatype.marker.EventMarker;
import hb403.geoexplore.datatype.marker.MarkerBase;
import hb403.geoexplore.datatype.marker.ObservationMarker;
import hb403.geoexplore.datatype.marker.ReportMarker;
import hb403.geoexplore.datatype.marker.repository.MarkerTagRepository;
import hb403.geoexplore.datatype.marker.repository.ReportRepository;
import hb403.geoexplore.datatype.request.Location;
import hb403.geoexplore.datatype.request.LocationProximity;
import hb403.geoexplore.datatype.request.LocationRange;
import hb403.geoexplore.datatype.request.Range;
import hb403.geoexplore.util.GeometryUtil;

import java.util.*;

import io.swagger.v3.oas.annotations.Operation;

import org.locationtech.jts.geom.Polygon;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;


@RestController
public class ReportController {
	
	@Autowired
	protected ReportRepository reports_repo;
	@Autowired
    protected MarkerTagRepository tags_repo;
	@Autowired
	protected UserRepository users_repo;
	@Autowired
	protected CommentRepository commentRepository;


	/** [C]rudl - Add a new report to the database */
	@Operation(summary = "Add a new report to the database")
	@PostMapping(path = "geomap/reports")
	public @ResponseBody ReportMarker saveReport(@RequestBody ReportMarker report) {
		if(report != null) {
			report.nullifyId();
			report.enforceLocationIO();
			report.applyNewTimestamp();
			final ReportMarker r = this.reports_repo.save(report);
			r.enforceLocationTable();
			return r;
		}
		return null;
	}
	/** c[R]udl - Get a report from the database by it's id */
	@Operation(summary = "Get a report from the database from its id")
	@GetMapping(path = "geomap/reports/{id}")
	public @ResponseBody ReportMarker getReportById(@PathVariable Long id) {
		if(id != null) {
			try {
				final ReportMarker r = this.reports_repo.findById(id).get();
				r.enforceLocationTable();
				return r;
			} catch(Exception e) {
				// continue >>> (return null)
			}
		}
		return null;
	}
	/** cr[U]dl - Update a report already in the database by it's id */
	@Operation(summary = "Update a report already in the database by its id")
	@PutMapping(path = "geomap/reports/{id}")
	public @ResponseBody ReportMarker updateReportById(@PathVariable Long id, @RequestBody ReportMarker report) {
		if(id != null && report != null) {
			report.setId(id);
			report.enforceLocationIO();
			report.applyUpdatedTimestamp();
			final ReportMarker r = this.reports_repo.save(report);
			r.enforceLocationTable();
			return r;
		}
		return null;
	}
	/** cru[D]l - Delete a report in the database by it's id */
	@Operation(summary = "Delete a report in the database by its id")
	@DeleteMapping(path = "geomap/reports/{id}")
	public @ResponseBody ReportMarker deleteReportById(@PathVariable Long id) {
		if(id != null) {
			try {
				final ReportMarker ref = this.getReportById(id);
				this.reports_repo.deleteById(id);
				/*if (ref.getComments()!= null) {
					List<CommentEntity> commentsToDelete = ref.getComments();
					commentsToDelete.forEach(comment -> {
						commentRepository.deleteById(comment.getId());
					});
				}*/
				ref.enforceLocationTable();
				return ref;
			} catch(Exception e) {
				// continue >>> (return null)
			}
		}
		return null;
	}

	/** crud[L] - Get a list of all the reports in the database */
	@Operation(summary = "Get a list of all the reports in the database")
	@GetMapping(path = "geomap/reports")
	public @ResponseBody List<ReportMarker> getAllReports() {
		final List<ReportMarker> reports = this.reports_repo.findAll();
		for(ReportMarker r : reports) {
			r.enforceLocationTable();
		}
		return reports;
	}



	/** Returns the set of reports within the bounds generated by the provided WKT geometry string */
	@Operation(summary = "Get the set of reports whose locations are bounded by the provided WKT geometry string")
	@GetMapping(path = "geomap/reports/within/poly")
	public @ResponseBody Set<ReportMarker> getReportsWithinPoly(@RequestBody String wkt_bounds_geom) {	// takes in 'well known text' for the bounding geometry --> may define special json formats for predefined bounds later
		try {
			final Set<ReportMarker> bounded = this.reports_repo.findSetWithin( GeometryUtil.getGeometry(wkt_bounds_geom) );
			for(ReportMarker r : bounded) {
				r.enforceLocationTable();
			}
			return bounded;
		} catch(Exception e) {
			System.out.println("ReportController.getReportsWithinPoly(): Encountered exception! -- " + e.getMessage());
			// continue >>> (return null)
		}
		return null;
	}

	/**  */
	@Operation(summary = "Get the set of reports whose locations are bounded by the provided location window")
	@PostMapping(path = "geomap/reports/within/rect")
	public @ResponseBody Set<ReportMarker> getReportsWithinRect(@RequestBody Range range) {	// takes in 'well known text' for the bounding geometry --> may define special json formats for predefined bounds later
		if(range == null || range.isInvalid()) return null;
		try {

			final Polygon rect = range.getRect();
			final Set<ReportMarker> bounded = this.reports_repo.findSetWithin( rect );

			System.out.printf(
				"[REPORTS RECT SEARCH]: Recieved bounds object: {\n\tmin lat: %f,\n\tmin lon: %f,\n\tmax lat: %f,\n\tmax lat: %f\n}\n" +
				"[REPORTS RECT SEARCH]: Recieved %d query results.\n" +
				"[REPORTS RECT SEARCH]: Computed search bounds:\n{\n\tWKT: %s\n}\n",
				range.min_latitude,
				range.min_longitude,
				range.max_latitude,
				range.max_longitude,
				bounded.size(),
				rect.toString()
			);

			for(ReportMarker r : bounded) {
				r.enforceLocationTable();
			}
			return bounded;
		} catch(Exception e) {
			System.out.println("ReportController.getReportsWithinRect(): Encountered exception! -- " + e.getMessage());
			// continue >>> (return null)
		}
		return null;
	}

	@Operation(summary = "Get the set of reports whose locations are bounded by the provided location window, sorted by distance from the provided location")
	@PostMapping(path = "geomap/reports/within/rect/sorted")
	public @ResponseBody List<ReportMarker> getProxSortedReportsWithinRect(@RequestBody LocationRange range) {
		if(range == null || range.isInvalid()) return null;
		try {
			
			final Polygon rect = range.getRect();
			final List<ReportMarker> bounded = this.reports_repo.findListWithin( rect );

			System.out.printf(
				"[REPORTS RECT SORTED SEARCH]: Recieved bounds object: {\n\tmin lat: %f,\n\tmin lon: %f,\n\tmax lat: %f,\n\tmax lat: %f,\n\tsrc lat: %f,\n\tsrc lat: %f\n}\n" +
				"[REPORTS RECT SORTED SEARCH]: Recieved %d query results.\n" +
				"[REPORTS RECT SORTED SEARCH]: Computed search bounds:\n{\n\tWKT: %s\n}\n",
				range.min_latitude,
				range.min_longitude,
				range.max_latitude,
				range.max_longitude,
				range.src_latitude,
				range.src_longitude,
				bounded.size(),
				rect.toString()
			);

			MarkerBase.sortByProximityAsc(bounded, range.src_latitude, range.src_longitude, true);
			return bounded;

		} catch(Exception e) {
			System.out.println("ReportController.getProxSortedReportsWithinRect(): Encountered exception! -- " + e.getMessage());
			// continue >>> (return null)
		}
		return null;
	}

	@Operation(summary = "Get all the reports within the specified proximity (from the specified source) -- results are sorted according to ascending proximity")
	@PostMapping(path = "geomap/reports/within/proximity")
	public @ResponseBody List<ReportMarker> getReportsWithinProximitySorted(@RequestBody LocationProximity range) {
		if(range == null || range.isInvalid()) return null;
		try {

			System.out.printf(
				"[REPORTS PROXIMITY SEARCH]: Recieved range object: {\n\tlat: %f,\n\tlon: %f,\n\trange: %f\n}\n",
				range.latitude,
				range.longitude,
				range.range
			);

			final Polygon[] search_bounds = range.getMinMaxSearchBounds();

			System.out.printf(
				"[REPORTS PROXIMITY SEARCH]: Computed search bounds (x%d):\n",
				search_bounds.length
			);
			for(Polygon p : search_bounds) {
				System.out.printf(
					"{\n\tWKT: %s\n}\n",
					p.toString()
				);
			}

			List<ReportMarker> bounded = null;
			for(Polygon p : search_bounds) {
				if(bounded == null) bounded = this.reports_repo.findListWithin(p);
				else bounded.addAll( this.reports_repo.findListWithin(p) );
			}

			System.out.printf(
				"[REPORTS PROXIMITY SEARCH]: Conducted database bounds search - recieved %d results\n",
				bounded.size()
			);

			if(bounded == null) return null;	// make java shut up about not being initialized blah blah blah
			MarkerBase.sortByProximityAsc(bounded, range.latitude, range.longitude, true);
			
			int
				lower = 0,
				upper = bounded.size();
			for(int i = (upper + lower) / 2; lower < upper && i >= 0 && i < bounded.size(); i = (upper + lower) / 2) {	// binary search
				double dist = bounded.get(i).distanceTo(range.latitude, range.longitude);
				if(dist <= range.range) {
					lower = i + 1;
				} else {
					upper = i;
				}
			}
			return bounded.subList(0, lower);

		} catch(Exception e) {

		}
		return null;
	}

	/** */
	@Operation(summary = "Get the distance to a report from a specified location (IN MILES)")
	@PostMapping(path = "geomap/reports/{id}/distance")
	public @ResponseBody Double getDistanceToMarkerById(@PathVariable Long id, @RequestBody Location src) {
		if(id != null && src != null && src.isValid()) {
			final ReportMarker m = this.getReportById(id);
			if(m != null) {
				m.enforceLocationTable();
				return GeometryUtil.arcdistanceGlobal(src.latitude, src.longitude, m.getIo_latitude(), m.getIo_longitude());
			}
		}
		return null;
	}



	@Operation(summary = "Add a prexisting tag by its id to a marker by its id")
	@PostMapping(path = "geomap/reports/{id}/tags")
	public @ResponseBody ReportMarker addTagToMarkerById(@PathVariable Long id, @RequestBody Long tag_id) {
		if(id != null && tag_id != null) {
			try {
				final MarkerTag t = this.tags_repo.findById(tag_id).get();
				final ReportMarker m = this.reports_repo.findById(id).get();
				if(m.getTags().add(t)) {
					m.applyUpdatedTimestamp();
					this.reports_repo.save(m);
					return m;
				}
			} catch(Exception e) {

			}
		}
		return null;
	}

	@Operation(summary = "Add a prexisting user by id as a confirmation to a marker by its id")
	@PostMapping(path = "geomap/reports/{id}/confirmations")
	public @ResponseBody ReportMarker addUserToConfirmedById(@PathVariable Long id, @RequestBody Long user_id) {
		if(id != null && user_id != null) {
			try {
				final ReportMarker m = this.reports_repo.findById(id).get();
				final User u = this.users_repo.findById(user_id).get();
				if(m.getConfirmed_by().add(u)) {
					m.applyUpdatedTimestamp();
					this.reports_repo.save(m);
					return m;
				}
			} catch(Exception e) {

			}
		}
		return null;
	}



	/** TODO:
     * - get marker creator (User) by marker id
     * - get marker tags (MarkerTag[]) by marker id
     * - append [NEW] marker tag to list, accessed by marker id
     * - append [EXISTING] marker tag to list, accessed by marker id and tag id
     * - append User to marker "listed users" by marker id and user id
     */


}
